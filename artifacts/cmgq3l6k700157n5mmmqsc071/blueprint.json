{
  "domain": "appsmith.com",
  "nav": [
    {
      "text": "Home",
      "href": "/"
    },
    {
      "text": "Querying Mongodb",
      "href": "/connect-data/reference/querying-mongodb"
    },
    {
      "text": "Notion",
      "href": "/connect-data/reference/notion"
    },
    {
      "text": "Custom",
      "href": "/reference/widgets/custom"
    },
    {
      "text": "Security Scram",
      "href": "/docs/manual/core/security-scram/"
    },
    {
      "text": "NnaJdA1A11s",
      "href": "/embed/NnaJdA1A11s"
    }
  ],
  "pages": [
    {
      "url": "https://docs.appsmith.com",
      "slug": "index",
      "title": "Introduction | Appsmith",
      "sections": [
        {
          "type": "section",
          "title": "Why Appsmith [​](https://docs.appsmith.com/\\#why-appsmith \"Direct link to Why Appsmith\")",
          "content": "[Skip to main content](https://docs.appsmith.com/#__docusaurus_skipToContent_fallback)\nOn this page\nOrganizations build internal applications such as dashboards, database GUIs, admin panels, approval apps, customer support tools, etc. to help improve their business operations. Appsmith is an open-source developer tool that enables the rapid development of these applications. You can drag and drop pre-built widgets to build UI. Connect securely to your databases & APIs using its datasources. Write business logic to read & write data using queries & JavaScript.\n[![undefined](https://img.youtube.com/vi/NnaJdA1A11s/maxresdefault.jpg)](https://youtube.com/embed/NnaJdA1A11s?autoplay=1)\nAppsmith makes it easy to build a UI that talks to any datasource. You can create anything from simple CRUD apps to complicated multi-step workflows with a few simple steps:\n- **Connect Datasource**: Integrate with a database or API. Appsmith supports the most popular databases and REST APIs.\n- **Build UI**: Use built-in widgets to build your app layout.\n- **Write Logic**: Express your business logic using queries and JavaScript anywhere in the editor.\n- **Collaborate, Deploy, Share**: Appsmith supports version control using Git to build apps in collaboration using branches to track and roll back changes. Deploy the app and share it with other users."
        },
        {
          "type": "section",
          "title": "Get started [​](https://docs.appsmith.com/\\#get-started \"Direct link to Get started\")",
          "content": "1. Create an account on the cloud platform or self-host Appsmith for free.\n   - [Appsmith Cloud](https://login.appsmith.com/): Sign up for a free account with your organization name ( `orgname.appsmith.com`). Try the Business Edition free for 15 days, then continue with Community Edition or upgrade to a paid plan.\n   - [Self-Host Appsmith](https://docs.appsmith.com/getting-started/setup): Deploy Appsmith on your local machine or private server.\n2. Take the quick tutorial to learn the basics to help you build an app using Appsmith. For more information, see [Build your first app](https://docs.appsmith.com/getting-started/tutorials/start-building).\nWas this page helpful?\n![Thumbs Up](https://docs.appsmith.com/img/thumbs-up-line.svg)![Thumbs down](https://docs.appsmith.com/img/thumbs-down-line.svg)\n- [Why Appsmith](https://docs.appsmith.com/#why-appsmith)\n- [Get started](https://docs.appsmith.com/#get-started)"
        }
      ],
      "images": [
        "https://img.youtube.com/vi/NnaJdA1A11s/maxresdefault.jpg",
        "https://docs.appsmith.com/img/thumbs-up-line.svg",
        "https://docs.appsmith.com/img/thumbs-down-line.svg"
      ]
    },
    {
      "url": "https://docs.appsmith.com/write-code/concepts/execute-onpageload",
      "slug": "write-code-concepts-execute-onpageload",
      "title": "Run Code On Page Load | Appsmith",
      "sections": [
        {
          "type": "content",
          "content": "[Skip to main content](https://docs.appsmith.com/write-code/concepts/execute-onpageload#__docusaurus_skipToContent_fallback)\n\nThis page shows you how to run queries or JavaScript functions during the initial load of a page using the Run on page load property.\n\nAppsmith automatically runs queries and functions on page load if they are bound to widget properties, ensuring necessary data is available. Users can manually control this behavior through query or function settings.\n\n1. Navigate to the query or JS function you want to execute on page load.\n\n**Example 1:** If you want to display a login modal when the page loads, you can create a function inside a JSObject using [showModal()](https://docs.appsmith.com/reference/appsmith-framework/widget-actions/show-modal) like:\n\n```codeBlockLines_e6Vv\nexport default {\n    // Function to show Modal\n    showMyModal() {\n        showModal(LoginModal.name);\n    }\n}\n// Enable \"Run on Page Load\" from JSObject settings\n\n```\n\n**Example 2:** If you want "
        }
      ],
      "images": [
        "https://docs.appsmith.com/img/showmodal-pageload.png",
        "https://docs.appsmith.com/img/thumbs-up-line.svg",
        "https://docs.appsmith.com/img/thumbs-down-line.svg"
      ]
    },
    {
      "url": "https://docs.appsmith.com/connect-data/reference/querying-mongodb",
      "slug": "connect-data-reference-querying-mongodb",
      "title": "MongoDB | Appsmith",
      "sections": [
        {
          "type": "section",
          "title": "Connect MongoDB [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#connect-mongodb \"Direct link to Connect MongoDB\")",
          "content": "[Skip to main content](https://docs.appsmith.com/connect-data/reference/querying-mongodb#__docusaurus_skipToContent_fallback)\nOn this page\nThis page gives information to connect Appsmith to a MongoDB database and to read and write data in your applications.\n[![Build a MongoDB Panel](https://img.youtube.com/vi/F_By1KmJKrk/maxresdefault.jpg)](https://youtube.com/embed/F_By1KmJKrk?autoplay=1)\n_Build a MongoDB Panel_\ncaution\nIf you are a cloud user, you must whitelist the IP address of the Appsmith deployment `18.223.74.85` and `3.131.104.27` on your database instance or VPC before connecting to a database. See [**How to whitelist IP addresses on MongoDB Atlas**](https://studio3t.com/knowledge-base/articles/mongodb-atlas-login-ip-whitelisting/#how-to-whitelist-ip-addresses-on-mongodb-atlas) for more details.\n### Connection parameters [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#connection-parameters \"Direct link to Connection parameters\")\nThe following section is a reference guide that provides a complete description of all the parameters to connect to a MongoDB database.\n![Configure MongoDB using Connection String URI](https://docs.appsmith.com/img/configure-mongodb-using-connection-string-uri.png)_Connect MongoDB using Connection String URI_\n#### Use Mongo Connection String URI [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#use-mongo-connection-string-uri \"Direct link to Use Mongo Connection String URI\")\n_Options:_\n- **Yes:** Connect to MongoDB database using the Connection String URI format\n- **No:** Connect to MongoDB database by configuring multiple parameter fields.\n#### Connection String URI [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#connection-string-uri \"Direct link to Connection String URI\")\nA MongoDB connection string URI (Uniform Resource Identifier) is a standardized way to specify the location and other details of a MongoDB database. This field is visible only if you select **Yes** in the **Use Mongo Connection String URI** list. See [**Connection String URI Format**](https://www.mongodb.com/docs/manual/reference/connection-string/#connection-string-uri-format) for details on how to specify the MongoDB connection string.\nUse the following syntax to specify the MongoDB connection string:\n```\nmongodb+srv://<USERNAME>:<PASSWORD>@<HOST>/<DATABASE_NAME>\n```\n_Example:_\n```\nmongodb+srv://mockdb-admin:****@mockdb.kce5o.mongodb.net/movies?retryWrites=true&w=majority&authSource=admin\n```\n* * *\nThe following section lists the parameters to connect MongoDB by configuring multiple parameter fields instead of the _Connection String URI_ format.\n![Connect MongoDB using multiple parameter fields](https://docs.appsmith.com/img/configure-mongodb-using-connection-mode.png)_Connect MongoDB using multiple parameter fields_\n#### Connection Mode [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#connection-mode \"Direct link to Connection Mode\")\nSpecifies the mode in which the Appsmith application can interact with the database. This field and the subsequent fields are visible only if you select **No** in the **Use Mongo Connection String URI** list.\n_Options:_\n- **Read Only:** This mode permits only read-only operations by default.\n- **Read/Write:** This mode permits both read-write operations by default.\n#### Connection Type [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#connection-type \"Direct link to Connection Type\")\nSpecifies whether to connect to a MongoDB instance or replica set deployment.\n_Options:_\n- **Direct Connection:** Enables you to connect to a single MongoDB instance\n- **Replicate Set:** Enables you to connect to a group of connected instances that store the same set of data. This configuration provides data redundancy and high data availability. To connect to a replica set deployment, you must specify each instance's hostname and port numbers.\n#### Host Address [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#host-address \"Direct link to Host Address\")\nSpecifies the server's IP address or domain name where MongoDB is running. If you want to connect to a local MongoDB database, see [**Connect Local Database**](https://docs.appsmith.com/connect-data/how-to-guides/how-to-work-with-local-apis-on-appsmith) for directions on configuring the connection parameters.\n#### Port [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#port \"Direct link to Port\")\nThe port number on which MongoDB listens for incoming connections. Appsmith connects to port `27017` by default if you don't specify one.\n#### Default Database Name [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#default-database-name \"Direct link to Default Database Name\")\nSpecifies the default authentication database to use when authenticating a user. In MongoDB, when a user is authenticated, the authentication process checks the user's credentials against a specific database. By default, this database is `admin`, but you can specify a different database by using the **Default Database Name** parameter.\n#### Database Name [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#database-name \"Direct link to Database Name\")\nSpecifies the database name associated with the user's credentials. If **Database Name** is unspecified, it defaults to the name specified in the **Default Database Name** field. If **Default Database Name** is unspecified, then **Database Name** defaults to `admin`.\n#### Authentication Type [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#authentication-type \"Direct link to Authentication Type\")\nSpecifies the authentication mechanism that MongoDB uses to authenticate the connection.\n_Options:_\n- **SCRAM-SHA-1:** Provides secure password storage through the use of a salted hash function. See [SCRAM-SHA-1](https://www.mongodb.com/docs/manual/core/security-scram/#std-label-authentication-scram-sha-1) for details.\n- **SCRAM-SHA-256:** Uses the SHA-256 hashing algorithm for password storage. See [SCRAM-SHA-256](https://www.mongodb.com/docs/manual/core/security-scram/#std-label-authentication-scram-sha-256) for details.\n- **MONGODB-CR:** Uses a challenge-response protocol to authenticate users based on a combination of a password and a random challenge string. See [MONGODB-CR](https://www.mongodb.com/docs/v3.2/core/security-mongodb-cr/) for details.\ninfo\nYou cannot specify MONGODB-CR as the authentication mechanism when connecting to MongoDB 4.0+ deployments.\n#### Username [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#username \"Direct link to Username\")\nProvide the username required for authenticating connection requests to the database.\n#### Password [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#password \"Direct link to Password\")\nProvide the password required for authenticating connection requests for the given username to the database.\n#### SSL Mode [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#ssl-mode \"Direct link to SSL Mode\")\nSSL can be used to secure the connection between the client and the server by encrypting all data that is transmitted between them.\n_Options:_\n- **Default:** Depends on **Connection Type** field. If using the **Replica set** option, this is `Enabled`. If using the **Direct Connection**, this is `Disabled`.\n- **Enabled:** Initiates the connection with TLS/SSL. Rejects the connection if SSL is not available.\n- **Disabled:** Initiates the connection without TLS/SSL. Disallows all administrative requests over HTTPS. It uses a plain unencrypted connection."
        },
        {
          "type": "section",
          "title": "Query MongoDB [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#query-mongodb \"Direct link to Query MongoDB\")",
          "content": "The following section is a reference guide that provides a complete description of all the read and write operation commands with their parameters to create MongoDB queries.\n![Create MongoDB queries](https://docs.appsmith.com/img/mongoide.png)_Create MongoDB queries_\ninfo\nSee [**Query and Write Operation Commands**](https://docs.mongodb.com/manual/reference/command/nav-crud/) for the MongoDB database commands.\n### Find Documents [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#find-documents \"Direct link to Find Documents\")\nThis command fetches documents from a collection. The following section lists all the fields available for the **Find Documents** command.\n#### Collection [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#collection \"Direct link to Collection\")\nThe name of the target collection from which you want to retrieve documents.\n#### Query [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#query \"Direct link to Query\")\nSpecifies the criteria that match the documents you want to retrieve.\n_Example:_\n```\n{\nrating: { $gte: 4 },\ncuisine: {{cuisineList.selectedOptionValue}}\n}\n```\nIn the above example, the query filters documents from a restaurant collection where the rating field is greater than 4 and the cuisine matches the one selected in the Select widget `cusineList`.\n#### Sort [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#sort \"Direct link to Sort\")\nSpecifies the order in which the documents should be returned.\n_Example:_\n```\n{ name: 1 }\n```\nIn the above example, the query sorts the results by the `name` field in ascending order.\n#### Projection [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#projection \"Direct link to Projection\")\nSpecifies which fields to include in the returned documents.\n_Example:_\n```\n{ name: 1, rating: 1, address: 1 }\n```\nIn the above example, the query only returns the `name`, `rating`, and `address` fields in the matching documents.\n#### Limit [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#limit \"Direct link to Limit\")\nSpecifies the maximum number of documents to return. The default value is 10. If this field is not specified, the query returns 10 documents.\n_Example:_\n```\n{{tableItems.pageSize}}\n```\nIn the above example, `tableItems` is the name of the Table widget where you display the results from the query. The query limits the results based on the table widget's pageSize property.\n#### Skip [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#skip \"Direct link to Skip\")\nThis field specifies the number of documents to skip before returning results.\n_Example:_\n```\n{{tableItems.pageOffset}}\n```\nIn the above examples for the **Limit** and **Skip** fields, the queries use [**server-side pagination**](https://docs.appsmith.com/build-apps/how-to-guides/Server-side-pagination-in-table) to limit the number of query results returned by the server and fetch additional results when the user moves to the next page in the Table widget. You can fork this [**Sample App**](https://app.appsmith.com/applications/623cca594d9aea1b062b33c6/pages/623cca594d9aea1b062b33cd) to see how to implement server-side pagination on the Table widget.\n### Insert Documents [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#insert-documents \"Direct link to Insert Documents\")\nThis command inserts one or more documents and returns a document containing the status of all inserts. The following section lists all the fields for the **Insert Documents** command.\n#### Collection [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#collection-1 \"Direct link to Collection\")\nThe name of the target collection where you want to insert the documents.\n#### Documents [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#documents \"Direct link to Documents\")\nSpecifies an array of one or more documents you want to insert into the collection.\n_Example:_\n```\n[\\\n{\\\n  \"_id\": {{NewMovieForm.data.idInput}},\\\n  \"name\": {{NewMovieForm.data.nameInput}},\\\n  \"rating\": {{NewMovieForm.data.ratingSelect}}\\\n}\\\n]\n```\nIn the above example, the query inserts a new movie using the data entered in the Form widget.\n### Update Documents [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#update-documents \"Direct link to Update Documents\")\nThis command modifies the documents in a collection based on a specified set of filters. The following section lists all the fields available for the **Update Documents** command.\n#### Collection [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#collection-2 \"Direct link to Collection\")\nThe name of the target collection where you want to update documents.\n#### Query [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#query-1 \"Direct link to Query\")\nSpecifies the criteria that match the documents you want to update._Example:_\n```\n{\n\"_id\": {{tableItems.selectedRow.id}}\n}\n```\nIn the above example, the query filters the record where the `_id` field is equal to the value in the `id` column of the row selected on the Table widget named `tableItems`.\n#### Update [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#update \"Direct link to Update\")\nSpecifies the modifications you want to make to the selected documents.\n_Example:_\n```\n{\n$set: {\n  \"name\":  {{tableItems.updatedRow.name}},\n  \"rating\": {{tableItems.updatedRow.rating}}\n}\n}\n```\nIn the above example, the query updates the `name` and `rating` fields with the values updated in the table cells using [**inline editing**](https://docs.appsmith.com/reference/widgets/table/inline-editing).\n#### Limit [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#limit-1 \"Direct link to Limit\")\nSpecifies whether to delete single or multiple documents\n_Options:_\n- **Single Document:** Limits the update to one document that meets the query criteria.\n- **All Matching Documents:** Updates the fields in all documents that meet the query criteria.\n### Delete Documents [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#delete-documents \"Direct link to Delete Documents\")\nThis command removes one or more documents from the collection based on specified filters. The following section lists all the fields available for the **Delete Documents** command.\n#### Collection [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#collection-3 \"Direct link to Collection\")\nThe name of the target collection where you want to delete documents.\n#### Query [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#query-2 \"Direct link to Query\")\nSpecifies the criteria that match the documents to delete.\n_Example:_\n```\n{\n\"rating\": {{selectRating.selectedOptionValue}}\n}\n```\nIn the above example, the query deletes all the documents where the `rating` field contains the same value as the one selected in the Select widget named `selectRating`.\n#### Limit [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#limit-2 \"Direct link to Limit\")\nSpecifies whether to delete single or multiple documents\n_Options:_\n- **Single Document:** Limits the update to one document that meets the query criteria.\n- **All Matching Documents:** Updates the fields in all documents that meet the query criteria.\n### Count [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#count \"Direct link to Count\")\nThis command counts the number of documents in a collection that match a specified set of criteria. The following section lists all the fields available for the **Count** command.\n#### Collection [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#collection-4 \"Direct link to Collection\")\nThe name of the target collection where you want to count the documents.\n#### Query [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#query-3 \"Direct link to Query\")\nThis field specifies the criteria for selecting the documents to count.\n_Example:_\n```\n{\n\"release_dt\": { $gte: {{releaseDate.formattedDate}}\n}\n```\nIn the above example, the query counts the documents in a `movies` collection where the release date is greater than the date picked in the Datepicker widget `releaseDate`.\n### Distinct [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#distinct \"Direct link to Distinct\")\nThis command finds the unique or distinct values for a specified field across a single collection. The following section lists all the fields available for the **Distinct** command.\n#### Collection [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#collection-5 \"Direct link to Collection\")\nSpecifies the name of the target collection to query for distinct values.\n#### Query [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#query-4 \"Direct link to Query\")\nSpecifies the documents from which to retrieve the distinct values.\n_Example:_\n```\n{\n\"rating\": {{selectRating.selectedOptionValue}}\n}\n```\nIn the above example, the query retrieves distinct values from the documents where the `rating` field contains the same value as the one selected in the Select widget named `selectRating`.\n#### Key [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#key \"Direct link to Key\")\nSpecifies the name of the field for which to return distinct values.\n### Aggregate [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#aggregate \"Direct link to Aggregate\")\nThis command allows users to process data records and return computed results. The aggregation framework provides several operators to perform a variety of operations like filtering, grouping, sorting, projecting, and calculating. See [**Aggregation Pipeline Stages**](https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/) for information on the aggregation operators. The following section lists all the fields available for the **Aggregate** command.\n#### Collection [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#collection-6 \"Direct link to Collection\")\nSpecifies the name of the target collection that serves as the input for the aggregation pipeline.\n#### Array of Pipelines [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#array-of-pipelines \"Direct link to Array of Pipelines\")\nAn array of aggregation pipeline stages that process and transform the document stream as part of the aggregation pipeline.\n_Example:_\n```\n{\n[\\\n  { $project: { tags: 1 } },\\\n  { $unwind: \"$tags\" },\\\n  { $group: { _id: \"$tags\", count: { $sum : 1 } } }\\\n]\n}\n```\nThe preceding example performs an aggregate operation on the `articles` collection to calculate the count of each distinct element in the `tags` array that appears in the collection\n#### Limit [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#limit-3 \"Direct link to Limit\")\nSpecifies the maximum number of documents to return. The default value is 10. If this field isn't specified, the query returns 10 documents.\n### Raw [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#raw \"Direct link to Raw\")\nThis command allows you to write queries using the MongoDB database command syntax. See [**Raw Query Commands**](https://docs.appsmith.com/connect-data/reference/querying-mongodb/mongo-syntax) for more information."
        },
        {
          "type": "section",
          "title": "Troubleshooting [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#troubleshooting \"Direct link to Troubleshooting\")",
          "content": "If you're experiencing difficulties, you can refer to the [Datasource troubleshooting guide](https://docs.appsmith.com/help-and-support/troubleshooting-guide/action-errors/datasource-errors), or contact the support team using the chat widget at the bottom right of this page."
        },
        {
          "type": "section",
          "title": "See also [​](https://docs.appsmith.com/connect-data/reference/querying-mongodb\\#see-also \"Direct link to See also\")",
          "content": "- [Raw Query Commands](https://docs.appsmith.com/connect-data/reference/querying-mongodb/mongo-syntax) \\- Explore MongoDB raw query commands and syntax for advanced querying and data manipulation.\n- [Export Audit Logs](https://docs.appsmith.com/build-apps/how-to-guides/export-audit-logs) \\- Learn how to export audit logs for tracking and reviewing system activity and changes.\n- [External MongoDB and Redis](https://docs.appsmith.com/getting-started/setup/instance-configuration/custom-mongodb-redis) \\- Guide on configuring and integrating external MongoDB and Redis instances with your application.\nWas this page helpful?\n![Thumbs Up](https://docs.appsmith.com/img/thumbs-up-line.svg)![Thumbs down](https://docs.appsmith.com/img/thumbs-down-line.svg)\n- [Connect MongoDB](https://docs.appsmith.com/connect-data/reference/querying-mongodb#connect-mongodb)\n  - [Connection parameters](https://docs.appsmith.com/connect-data/reference/querying-mongodb#connection-parameters)\n- [Query MongoDB](https://docs.appsmith.com/connect-data/reference/querying-mongodb#query-mongodb)\n  - [Find Documents](https://docs.appsmith.com/connect-data/reference/querying-mongodb#find-documents)\n  - [Insert Documents](https://docs.appsmith.com/connect-data/reference/querying-mongodb#insert-documents)\n  - [Update Documents](https://docs.appsmith.com/connect-data/reference/querying-mongodb#update-documents)\n  - [Delete Documents](https://docs.appsmith.com/connect-data/reference/querying-mongodb#delete-documents)\n  - [Count](https://docs.appsmith.com/connect-data/reference/querying-mongodb#count)\n  - [Distinct](https://docs.appsmith.com/connect-data/reference/querying-mongodb#distinct)\n  - [Aggregate](https://docs.appsmith.com/connect-data/reference/querying-mongodb#aggregate)\n  - [Raw](https://docs.appsmith.com/connect-data/reference/querying-mongodb#raw)\n- [Troubleshooting](https://docs.appsmith.com/connect-data/reference/querying-mongodb#troubleshooting)\n- [See also](https://docs.appsmith.com/connect-data/reference/querying-mongodb#see-also)"
        }
      ],
      "images": [
        "https://img.youtube.com/vi/F_By1KmJKrk/maxresdefault.jpg",
        "https://docs.appsmith.com/img/configure-mongodb-using-connection-string-uri.png",
        "https://docs.appsmith.com/img/configure-mongodb-using-connection-mode.png",
        "https://docs.appsmith.com/img/mongoide.png",
        "https://docs.appsmith.com/img/thumbs-up-line.svg",
        "https://docs.appsmith.com/img/thumbs-down-line.svg"
      ]
    },
    {
      "url": "https://docs.appsmith.com/connect-data/reference/notion",
      "slug": "connect-data-reference-notion",
      "title": "Notion | Appsmith",
      "sections": [
        {
          "type": "section",
          "title": "Connect Notion [​](https://docs.appsmith.com/connect-data/reference/notion\\#connect-notion \"Direct link to Connect Notion\")",
          "content": "[Skip to main content](https://docs.appsmith.com/connect-data/reference/notion#__docusaurus_skipToContent_fallback)\nOn this page\nThis page provides information on how to connect Notion with Appsmith, which allows you to build interactive tools or dashboards that fetch, create, or update Notion content.\nTo connect Appsmith to Notion, start by authenticating with your Notion account using your Notion email.\nOnce authenticated, you'll be able to select a Notion workspace and choose specific databases or pages to work with. Appsmith allows you to interact with these resources through queries and actions, enabling seamless integration with your Notion data."
        },
        {
          "type": "section",
          "title": "Query Notion [​](https://docs.appsmith.com/connect-data/reference/notion\\#query-notion \"Direct link to Query Notion\")",
          "content": "The following section provides a reference guide describing available commands and their parameters for interacting with Notion.\n### Create Page [​](https://docs.appsmith.com/connect-data/reference/notion\\#create-page \"Direct link to Create Page\")\nCreates a new page in your Notion workspace. This command allows you to define page details such as parent location, properties, content blocks, and visual elements.\n#### Parent `object` [​](https://docs.appsmith.com/connect-data/reference/notion\\#parent-object \"Direct link to parent-object\")\nSpecifies where the new page should be created in your Notion workspace. You can create the page either within an existing database or as a sub-page under another page.\nTo find a database ID:\n- Open the database in Notion\n- Look at the URL: `https://www.notion.so/workspace/[DATABASE_ID]?v=...`\n- The ID is the part before the question mark, typically a 32-character string with hyphens\nTo find a page ID:\n- Open the page in Notion\n- Look at the URL: `https://www.notion.so/workspace/Page-Title-[PAGE_ID]`\n- The ID is typically the last part of the URL, a 32-character string with hyphens\n_Example for creating a page in a database_:\n```codeBlockLines_e6Vv\n{\n  \"database_id\": \"3f846c9a5d324a93a38a29b6c2a9cb12\"\n}\n```\n_Example for creating a sub-page under an existing page_:\n```codeBlockLines_e6Vv\n{\n  \"page_id\": \"7a774b5c39c942d4a640a9dc3a84f3f0\"\n}\n```\n#### Properties `object` [​](https://docs.appsmith.com/connect-data/reference/notion\\#properties-object \"Direct link to properties-object\")\nDefines values for the columns in a Notion database when creating a new page. This is required when the `parent` is a `database_id`.\nEach key in the properties object should match a column name in the target Notion database, and the value should follow Notion's property format based on the column type.\nCommon property types include:\n- Title: `{ \"title\": [{ \"text\": { \"content\": \"Text here\" } }] }`\n- Select: `{ \"select\": { \"name\": \"Option name\" } }`\n- Date: `{ \"date\": { \"start\": \"2025-05-27\" } }`\n- Number: `{ \"number\": 42 }`\n- Checkbox: `{ \"checkbox\": true }`\n_Example for a task database with multiple properties_:\n```codeBlockLines_e6Vv\n{\n  \"Name\": {\n    \"title\": [\\\n      {\\\n        \"text\": {\\\n          \"content\": \"Quarterly Report\"\\\n        }\\\n      }\\\n    ]\n  },\n  \"Status\": {\n    \"select\": {\n      \"name\": \"In Progress\"\n    }\n  },\n  \"Due Date\": {\n    \"date\": {\n      \"start\": \"2025-06-15\"\n    }\n  }\n}\n```\n#### Children `array` [​](https://docs.appsmith.com/connect-data/reference/notion\\#children-array \"Direct link to children-array\")\nDefines the content blocks that appear inside the new Notion page. This is commonly used when creating a page under a `page_id` (not a database).\nEach object in the array represents a block type like paragraph, heading, to-do, bulleted list, etc. Each block must specify its type and corresponding content.\nCommon block types include:\n- Paragraph: `{ \"type\": \"paragraph\", \"paragraph\": { \"rich_text\": [{ \"text\": { \"content\": \"Text here\" } }] } }`\n- Heading: `{ \"type\": \"heading_2\", \"heading_2\": { \"rich_text\": [{ \"text\": { \"content\": \"Heading text\" } }] } }`\n- Bulleted list: `{ \"type\": \"bulleted_list_item\", \"bulleted_list_item\": { \"rich_text\": [{ \"text\": { \"content\": \"List item\" } }] } }`\n_Example for creating a page with multiple content blocks_:\n```codeBlockLines_e6Vv\n[\\\n  {\\\n    \"object\": \"block\",\\\n    \"type\": \"heading_2\",\\\n    \"heading_2\": {\\\n      \"rich_text\": [\\\n        {\\\n          \"text\": {\\\n            \"content\": \"Project Overview\"\\\n          }\\\n        }\\\n      ]\\\n    }\\\n  },\\\n  {\\\n    \"object\": \"block\",\\\n    \"type\": \"paragraph\",\\\n    \"paragraph\": {\\\n      \"rich_text\": [\\\n        {\\\n          \"text\": {\\\n            \"content\": \"This project aims to improve customer engagement through targeted content.\"\\\n          }\\\n        }\\\n      ]\\\n    }\\\n  },\\\n  {\\\n    \"object\": \"block\",\\\n    \"type\": \"bulleted_list_item\",\\\n    \"bulleted_list_item\": {\\\n      \"rich_text\": [\\\n        {\\\n          \"text\": {\\\n            \"content\": \"Phase 1: Research and planning\"\\\n          }\\\n        }\\\n      ]\\\n    }\\\n  }\\\n]\n```\n#### Cover `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#cover-string \"Direct link to cover-string\")\nSets a cover image for the Notion page. This image appears at the top of the page and helps visually distinguish it.\nEnter a URL to an image that will be used as the page cover.\n_Example_:\n```codeBlockLines_e6Vv\nhttps://images.unsplash.com/photo-1579529518-9e396f309\n```\n#### Icon `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#icon-string \"Direct link to icon-string\")\nSets a custom icon for the Notion page. This icon appears next to the page title and helps visually identify the page.\nYou can use an emoji character as the page icon.\n_Example_:\n```codeBlockLines_e6Vv\n🚀\n```\n### Update Page [​](https://docs.appsmith.com/connect-data/reference/notion\\#update-page \"Direct link to Update Page\")\nUpdates an existing page in your Notion workspace. This command allows you to modify page details such as properties, icon, cover image, or archive status.\n#### Page ID `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#page-id-string \"Direct link to page-id-string\")\nThe unique identifier of the page to update.\nTo find a page ID:\n- Open the page in Notion\n- Look at the URL: `https://www.notion.so/workspace/Page-Title-[PAGE_ID]`\n- The ID is typically the last part of the URL, a 32-character string with hyphens\n_Example_:\n```codeBlockLines_e6Vv\n7a774b5c39c942d4a640a9dc3a84f3f0\n```\n#### Archived `boolean` [​](https://docs.appsmith.com/connect-data/reference/notion\\#archived-boolean \"Direct link to archived-boolean\")\nDetermines whether the page is archived or active. Set to `true` to archive the page or `false` to unarchive it.\nArchiving a page removes it from the main workspace view but preserves it for future reference.\n_Example to archive a page_:\n```codeBlockLines_e6Vv\ntrue\n```\n_Example to unarchive a page_:\n```codeBlockLines_e6Vv\nfalse\n```\n#### Properties `object` [​](https://docs.appsmith.com/connect-data/reference/notion\\#properties-object-1 \"Direct link to properties-object-1\")\nUpdates the values of properties (columns) for a page in a database. The format is the same as when creating a page.\n_Example for updating task status and due date_:\n```codeBlockLines_e6Vv\n{\n  \"Status\": {\n    \"select\": {\n      \"name\": \"Completed\"\n    }\n  },\n  \"Due Date\": {\n    \"date\": {\n      \"start\": \"2025-06-30\"\n    }\n  }\n}\n```\n#### Cover `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#cover-string-1 \"Direct link to cover-string-1\")\nUpdates the cover image for the Notion page.\nEnter a URL to an image that will be used as the new page cover.\n_Example_:\n```codeBlockLines_e6Vv\nhttps://images.unsplash.com/photo-1518655048521-f130df041f66\n```\n#### Icon `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#icon-string-1 \"Direct link to icon-string-1\")\nUpdates the icon for the Notion page.\nEnter an emoji character to use as the new page icon.\n_Example_:\n```codeBlockLines_e6Vv\n📊\n```\n### Get Page by ID [​](https://docs.appsmith.com/connect-data/reference/notion\\#get-page-by-id \"Direct link to Get Page by ID\")\nRetrieves detailed information about a specific page using its unique Notion page ID. This command returns comprehensive data about the page, including its properties, parent information, and metadata.\n#### Page Id `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#page-id-string-1 \"Direct link to page-id-string-1\")\nThe unique identifier of the page to retrieve.\nTo find a page ID:\n- Open the page in Notion\n- Look at the URL: `https://www.notion.so/workspace/Page-Title-[PAGE_ID]`\n- The ID is typically the last part of the URL, a 32-character string with hyphens\n_Example_:\n```codeBlockLines_e6Vv\n7a774b5c39c942d4a640a9dc3a84f3f0\n```\n### Archive Page [​](https://docs.appsmith.com/connect-data/reference/notion\\#archive-page \"Direct link to Archive Page\")\nArchives a page in your Notion workspace. This command moves the page to the archive, making it less visible but still accessible if needed later.\n#### Page Id `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#page-id-string-2 \"Direct link to page-id-string-2\")\nThe unique identifier of the page to archive.\nTo find a page ID:\n- Open the page in Notion\n- Look at the URL: `https://www.notion.so/workspace/Page-Title-[PAGE_ID]`\n- The ID is typically the last part of the URL, a 32-character string with hyphens\n_Example_:\n```codeBlockLines_e6Vv\n7a774b5c39c942d4a640a9dc3a84f3f0\n```\n### Search Pages [​](https://docs.appsmith.com/connect-data/reference/notion\\#search-pages \"Direct link to Search Pages\")\nSearches for pages in your Notion workspace based on a keyword or phrase. This command returns pages that match the search criteria, including their IDs, titles, and other metadata.\n#### Filter `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#filter-string \"Direct link to filter-string\")\nThe search keyword or phrase used to match page titles and content.\nThe search performs a full-text search across all pages your integration has access to, returning pages where the title or content includes the filter string.\n_Example to search for project-related pages_:\n```codeBlockLines_e6Vv\nproject plan\n```\n_Example to search for specific content_:\n```codeBlockLines_e6Vv\nquarterly budget\n```\n_Example to search for pages by topic_:\n```codeBlockLines_e6Vv\nmarketing strategy\n```\n### Get Page Content [​](https://docs.appsmith.com/connect-data/reference/notion\\#get-page-content \"Direct link to Get Page Content\")\nRetrieves the full content of a specific page, including all blocks such as text, headings, lists, images, and other elements. This command returns the structured content of the page as a series of blocks.\n#### Block Id `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#block-id-string \"Direct link to block-id-string\")\nThe unique identifier of the root block of the page. This is typically the same as the page ID.\nTo find a block ID for a page:\n- Open the page in Notion\n- Look at the URL: `https://www.notion.so/workspace/Page-Title-[PAGE_ID]`\n- The page ID is also the root block ID\n_Example_:\n```codeBlockLines_e6Vv\n7a774b5c39c942d4a640a9dc3a84f3f0\n```\n### Update Block [​](https://docs.appsmith.com/connect-data/reference/notion\\#update-block \"Direct link to Update Block\")\nUpdates a specific block within a Notion page. This command allows you to modify the content or properties of an individual block, such as a paragraph, image, or table.\n#### Block ID `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#block-id-string-1 \"Direct link to block-id-string-1\")\nThe unique identifier of the block to update.\nTo find a block ID:\n- Use the \"Get Page Content\" command to list all blocks in a page\n- Each block in the response will have an `id` field\n- Block IDs are typically 32-character strings with hyphens\n_Example_:\n```codeBlockLines_e6Vv\nb55c9c91-384d-452b-81db-d1ef79372b75\n```\n#### Archived `boolean` [​](https://docs.appsmith.com/connect-data/reference/notion\\#archived-boolean-1 \"Direct link to archived-boolean-1\")\nDetermines whether the block is archived or active. Set to `true` to archive the block or `false` to unarchive it.\n_Example to archive a block_:\n```codeBlockLines_e6Vv\ntrue\n```\n#### Paragraph `object` [​](https://docs.appsmith.com/connect-data/reference/notion\\#paragraph-object \"Direct link to paragraph-object\")\nUpdates the content of a paragraph block. This is used when the block type is \"paragraph\".\n_Example_:\n```codeBlockLines_e6Vv\n{\n  \"rich_text\": [\\\n    {\\\n      \"text\": {\\\n        \"content\": \"This is the updated paragraph text with new information.\"\\\n      }\\\n    }\\\n  ]\n}\n```\n#### Image `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#image-string \"Direct link to image-string\")\nUpdates an image block with a new image. This is used when the block type is \"image\".\nEnter a URL to the new image.\n_Example_:\n```codeBlockLines_e6Vv\nhttps://images.unsplash.com/photo-1504805572947-34fad45aed93\n```\n#### Bookmark `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#bookmark-string \"Direct link to bookmark-string\")\nUpdates a bookmark block with a new URL. This is used when the block type is \"bookmark\".\nEnter the new URL for the bookmark.\n_Example_:\n```codeBlockLines_e6Vv\nhttps://www.notion.so/help\n```\n#### PDF `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#pdf-string \"Direct link to pdf-string\")\nUpdates a PDF block with a new PDF file. This is used when the block type is \"pdf\".\nEnter a URL to the new PDF file.\n_Example_:\n```codeBlockLines_e6Vv\nhttps://example.org/documents/quarterly-report.pdf\n```\n#### Table `object` [​](https://docs.appsmith.com/connect-data/reference/notion\\#table-object \"Direct link to table-object\")\nUpdates a table block with new structure and content. This is used when the block type is \"table\".\n_Example_:\n```codeBlockLines_e6Vv\n{\n  \"table_width\": 3,\n  \"has_column_header\": true,\n  \"has_row_header\": false,\n  \"children\": [\\\n    {\\\n      \"type\": \"table_row\",\\\n      \"table_row\": {\\\n        \"cells\": [\\\n          [{\"type\": \"text\", \"text\": {\"content\": \"Product\"}}],\\\n          [{\"type\": \"text\", \"text\": {\"content\": \"Price\"}}],\\\n          [{\"type\": \"text\", \"text\": {\"content\": \"Stock\"}}]\\\n        ]\\\n      }\\\n    },\\\n    {\\\n      \"type\": \"table_row\",\\\n      \"table_row\": {\\\n        \"cells\": [\\\n          [{\"type\": \"text\", \"text\": {\"content\": \"Widget A\"}}],\\\n          [{\"type\": \"text\", \"text\": {\"content\": \"$25.99\"}}],\\\n          [{\"type\": \"text\", \"text\": {\"content\": \"In stock\"}}]\\\n        ]\\\n      }\\\n    }\\\n  ]\n}\n```\n#### Table of Contents `object` [​](https://docs.appsmith.com/connect-data/reference/notion\\#table-of-contents-object \"Direct link to table-of-contents-object\")\nUpdates a table of contents block. This is used when the block type is \"table\\_of\\_contents\".\n_Example_:\n```codeBlockLines_e6Vv\n{\n  \"color\": \"default\"\n}\n```\n### Get Block by ID [​](https://docs.appsmith.com/connect-data/reference/notion\\#get-block-by-id \"Direct link to Get Block by ID\")\nRetrieves detailed information about a specific block using its unique Notion block ID. This command returns comprehensive data about the block, including its type, content, and metadata.\n#### Block ID `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#block-id-string-2 \"Direct link to block-id-string-2\")\nThe unique identifier of the block to retrieve.\nTo find a block ID:\n- Use the \"Get Page Content\" command to list all blocks in a page\n- Each block in the response will have an `id` field\n- Block IDs are typically 32-character strings with hyphens\n_Example_:\n```codeBlockLines_e6Vv\nb55c9c91-384d-452b-81db-d1ef79372b75\n```\n### Delete Block [​](https://docs.appsmith.com/connect-data/reference/notion\\#delete-block \"Direct link to Delete Block\")\nDeletes a specific block from a Notion page. This command permanently removes the block and its content.\n#### Block ID `string` [​](https://docs.appsmith.com/connect-data/reference/notion\\#block-id-string-3 \"Direct link to block-id-string-3\")\nThe unique identifier of the block to delete.\nTo find a block ID:\n- Use the \"Get Page Content\" command to list all blocks in a page\n- Each block in the response will have an `id` field\n- Block IDs are typically 32-character strings with hyphens\n_Example_:\n```codeBlockLines_e6Vv\nb55c9c91-384d-452b-81db-d1ef79372b75\n```\n### Custom Action [​](https://docs.appsmith.com/connect-data/reference/notion\\#custom-action \"Direct link to Custom Action\")\nExecutes a custom action against the Notion API. This command allows for advanced operations not covered by the standard commands.\nThis command enables you to perform custom operations with Notion that aren't covered by the standard commands. You can specify parameters and values according to your specific requirements.\nWhen using Custom Action, you may need to refer to the Notion documentation for guidance on specific operations and required parameters.\n_Example for a custom search query_:\n```codeBlockLines_e6Vv\n{\n  \"query\": \"Project Plan\",\n  \"sort\": {\n    \"direction\": \"ascending\",\n    \"timestamp\": \"last_edited_time\"\n  }\n}\n```\n_Example for a custom filter_:\n```codeBlockLines_e6Vv\n{\n  \"filter\": {\n    \"property\": \"Status\",\n    \"select\": {\n      \"equals\": \"Completed\"\n    }\n  }\n}\n```\nWas this page helpful?\n![Thumbs Up](https://docs.appsmith.com/img/thumbs-up-line.svg)![Thumbs down](https://docs.appsmith.com/img/thumbs-down-line.svg)\n- [Connect Notion](https://docs.appsmith.com/connect-data/reference/notion#connect-notion)\n- [Query Notion](https://docs.appsmith.com/connect-data/reference/notion#query-notion)\n  - [Create Page](https://docs.appsmith.com/connect-data/reference/notion#create-page)\n  - [Update Page](https://docs.appsmith.com/connect-data/reference/notion#update-page)\n  - [Get Page by ID](https://docs.appsmith.com/connect-data/reference/notion#get-page-by-id)\n  - [Archive Page](https://docs.appsmith.com/connect-data/reference/notion#archive-page)\n  - [Search Pages](https://docs.appsmith.com/connect-data/reference/notion#search-pages)\n  - [Get Page Content](https://docs.appsmith.com/connect-data/reference/notion#get-page-content)\n  - [Update Block](https://docs.appsmith.com/connect-data/reference/notion#update-block)\n  - [Get Block by ID](https://docs.appsmith.com/connect-data/reference/notion#get-block-by-id)\n  - [Delete Block](https://docs.appsmith.com/connect-data/reference/notion#delete-block)\n  - [Custom Action](https://docs.appsmith.com/connect-data/reference/notion#custom-action)"
        }
      ],
      "images": [
        "https://docs.appsmith.com/img/thumbs-up-line.svg",
        "https://docs.appsmith.com/img/thumbs-down-line.svg"
      ]
    },
    {
      "url": "https://docs.appsmith.com/reference/widgets/custom",
      "slug": "reference-widgets-custom",
      "title": "Custom | Appsmith",
      "sections": [
        {
          "type": "section",
          "title": "Content properties [​](https://docs.appsmith.com/reference/widgets/custom\\#content-properties \"Direct link to Content properties\")",
          "content": "[Skip to main content](https://docs.appsmith.com/reference/widgets/custom#__docusaurus_skipToContent_fallback)\nOn this page\nWhile Appsmith provides an extensive array of built-in widgets for application development, there are instances where your project demands a widget tailored to specific requirements. Appsmith's Custom widget allows you to integrate unique functionalities with your HTML, CSS, and JavaScript code for additional functionality.\nSee [How to create Custom widgets](https://docs.appsmith.com/build-apps/how-to-guides/Create-Custom-Widgets-Using-Iframe).\ninfo\nWhile Custom widgets support integrating HTML or React components, iframes with src URLs will not be loaded within Custom widgets. To use iframes, consider using the [Iframe widget](https://docs.appsmith.com/reference/widgets/iframe).\nThese properties are customizable options present in the property pane of the widget, allowing users to modify the widget according to their preferences.\n#### Edit Source [​](https://docs.appsmith.com/reference/widgets/custom\\#edit-source \"Direct link to Edit Source\")\nAllows you to customize the code for the custom widget. When clicked, it opens a dedicated page where you can conveniently modify and update the widget's code to suit your requirements.\nLearn more about [Custom Widget Builder](https://docs.appsmith.com/reference/widgets/custom#custom-widget-builder).\n#### Default Model [​](https://docs.appsmith.com/reference/widgets/custom\\#default-model \"Direct link to Default Model\")\nThis property allows you to pass object data to the custom widget's code editor. You can use mustache binding `{{}}` to pass data from queries or other widgets.\n_Example:_ If you want to pass the name from a Table widget to the custom widget, use the following code:\n```codeBlockLines_e6Vv\n{\n  \"name\": \"{{Table1.selectedRow.name}}\"\n}\n```\n- To access the data in the javascript editor in Custom widget builder page, use `appsmith.model.{property-name}`.\n- To access data in CSS Editor in Custom widget builder page, use `var(--appsmith-model-{property-name}`\n### General [​](https://docs.appsmith.com/reference/widgets/custom\\#general \"Direct link to General\")\n#### Visible `boolean` [​](https://docs.appsmith.com/reference/widgets/custom\\#visible-boolean \"Direct link to visible-boolean\")\nControls the visibility of the widget. If you turn off this property, the widget would not be visible in View Mode. Additionally, you can use JavaScript by clicking on **JS** next to the **Visible** property to conditionally control the widget's visibility. The default value for the property is `true`.\nFor example, if you want to make the widget visible only when the user selects \"Yes\" from a Select widget, you can use the following JavaScript expression:\n```codeBlockLines_e6Vv\n{\n  {\n    Select1.selectedOptionValue === \"Yes\";\n  }\n}\n```\n#### Height `string` [​](https://docs.appsmith.com/reference/widgets/custom\\#height-string \"Direct link to height-string\")\nThis property determines how the widget's height adjusts to changes in its content. There are three available options:\n- **Fixed**: The widget's height remains as set using drag and resize.\n- **Auto Height**: The widget's height adjusts dynamically in response to changes in its content.\n- **Auto Height with limits**: Same as **Auto height**, with a configurable option to set the minimum and maximum number of rows the widget can occupy.\nwarning\n- For the auto height feature to work properly, you should not set height of the container of the custom widget in the source editor. Setting a height\nwill restrict the container from growing as a result the auto height feature will not kick in.\n### Events [​](https://docs.appsmith.com/reference/widgets/custom\\#events \"Direct link to Events\")\nAllows you to create multiple events, providing the flexibility to configure various actions tailored to your specific requirements, such as Framework functions, queries, or JavaScript functions.\nThese events can be triggered in the JavaScript code editor of the Custom widget using the `appsmith.triggerEvent(\"eventName\")`.\n_Example_: To trigger an event from the custom widget upon a button click, create a new event named **onResetClick** and add the following in the JavaScript code:\n```codeBlockLines_e6Vv\nconst handleReset = () => {\n  setCurrentIndex(0);\n  appsmith.triggerEvent(\"onResetClick\");\n};\n```\n![Custom widget image](https://docs.appsmith.com/img/custom-ref-event.png)_Left: Custom Widget Builder \\| Right: Widget Events_"
        },
        {
          "type": "section",
          "title": "Reference properties [​](https://docs.appsmith.com/reference/widgets/custom\\#reference-properties \"Direct link to Reference properties\")",
          "content": "Reference properties are properties that are not available in the property pane but can be accessed using the dot operator in other widgets or JavaScript functions. They provide additional information or allow interaction with the widget programmatically. For instance, to get the visibility status, you can use `Custom1.isVisible`.\n#### model `string` [​](https://docs.appsmith.com/reference/widgets/custom\\#model-string \"Direct link to model-string\")\nThe `model` property retrieves the value from the Custom widget and **Default Model** property.\n_Example_:\n```codeBlockLines_e6Vv\n{{Custom1.model}}\n// Accessing a specific property\n{{Custom1.model.signatureImage}}\n```\n#### isVisible `boolean` [​](https://docs.appsmith.com/reference/widgets/custom\\#isvisible-boolean \"Direct link to isvisible-boolean\")\nThe `isVisible` property indicates the visibility state of a widget, with true indicating it is visible and false indicating it is hidden.\n_Example_:\n```codeBlockLines_e6Vv\n{{ Custom1.isVisible }}\n```"
        },
        {
          "type": "section",
          "title": "Custom Widget Builder [​](https://docs.appsmith.com/reference/widgets/custom\\#custom-widget-builder \"Direct link to Custom Widget Builder\")",
          "content": "This section, which you can open by clicking on the edit source button on property pane of the custom widget, provides the Custom Widget Code Editor, which allows you to edit HTML, JS, and CSS code for your custom widgets.\n![Custom widget builder image](https://docs.appsmith.com/img/custom-widget-builder.png)_Custom Widget Builder_\ninfo\n- When creating your custom component, skip `<html>` and `<body>` tags. Instead, add only essential tags directly in your HTML code.\n- When importing libraries, opt for ESM (ECMAScript Module) or UMD (Universal Module Definition) method. Use trusted CDN providers like [jsDelivr](https://www.jsdelivr.com/) or [UNPKG](https://unpkg.com/) for library imports.\n### Javascript API [​](https://docs.appsmith.com/reference/widgets/custom\\#javascript-api \"Direct link to Javascript API\")\nThese properties are accessible within the JavaScript editor, providing specific functionalities and customization options.\n#### model `object` [​](https://docs.appsmith.com/reference/widgets/custom\\#model-object \"Direct link to model-object\")\nThe `model` property retrieves the value passed in the **Default Model** property of the Custom widget.\n```codeBlockLines_e6Vv\n// Access the entire model\nappsmith.model;\n// Access a specific property in the model\nappsmith.model.propertyname;\n```\n#### mode `string` [​](https://docs.appsmith.com/reference/widgets/custom\\#mode-string \"Direct link to mode-string\")\nThe `mode` property represents the current render context of the Custom widget.\n```codeBlockLines_e6Vv\nappsmith.mode;\n// Value: EDITOR | BUILDER | DEPLOYED\n```\n#### theme `object` [​](https://docs.appsmith.com/reference/widgets/custom\\#theme-object \"Direct link to theme-object\")\nThe `theme` object reflects the current theme of the Appsmith application.\n- `primaryColor` ( `string`): Represents the primary color of the application theme.\n- `backgroundColor` ( `string`): Represents the background color of the application theme.\n- `borderRadius` ( `string`): Specifies the border radius used in the application theme.\n- `boxShadow` ( `string`): Represents the box shadow applied in the application theme.\n```codeBlockLines_e6Vv\nappsmith.theme;\n```\n#### ui `object` [​](https://docs.appsmith.com/reference/widgets/custom\\#ui-object \"Direct link to ui-object\")\nProvides access to the UI elements of the widget, such as width and height, in pixels.\n```codeBlockLines_e6Vv\nappsmith.ui;\n```\n### Methods [​](https://docs.appsmith.com/reference/widgets/custom\\#methods \"Direct link to Methods\")\n#### updateModel [​](https://docs.appsmith.com/reference/widgets/custom\\#updatemodel \"Direct link to updateModel\")\nThe `updateModel` property allows you to dynamically update the model properties. This enables real-time synchronization between the Custom widget and the parent application.\n_Example_: If you want to save a signature from a Signature pad custom widget, upon button click, use the following code:\n```codeBlockLines_e6Vv\ndocument.getElementById(\"saveBtn\").addEventListener(\"click\", function () {\n  var dataURL = signaturePad.toDataURL();\n  // Implement logic to save the signature data (e.g., send to server)\n  appsmith.updateModel({ signatureImage: dataURL });\n});\n```\nOnce button is clicked, the signature pad data will be available on the custom widget model property. you can use this data in another widget using the `{{}}` binding.\n_Example_: You can bind signature pad data to an image widget by pasting following code on Image widget's `image` property on the property pane.\n```codeBlockLines_e6Vv\n{{ Custom1.model.signatureImage }}\n```\n#### triggerEvent [​](https://docs.appsmith.com/reference/widgets/custom\\#triggerevent \"Direct link to triggerEvent\")\nYou can execute custom events that you created in the property pane of the custom widget by calling this function with the name of the event. You can also pass some optional data by including a second argument.\n_Example_: Let's say you have buttons in your custom component, upon clicked, you want to trigger `onClick` event along the itemId\n```codeBlockLines_e6Vv\nfunction onClick() {\n  appsmith.triggerEvent(\"onClick\", { itemId: 1 });\n}\n```\n![Custom widget onClick event image](https://docs.appsmith.com/img/custom-widget-onClick-event.png)_Custom Widget custom event: onClick_\n#### onModelChange [​](https://docs.appsmith.com/reference/widgets/custom\\#onmodelchange \"Direct link to onModelChange\")\nThe `onModelChange` function allows you to register a handler function, which will be called whenever there is a change in the model, either from the platform or from within the custom widget (for example, via the `updateModel` function). This is useful for responding to changes in the widget's state.\nHowever, it's important to ensure that changes triggered by your widget's own updates don't lead to infinite loops. You can handle this by adding a condition to check if the relevant part of the model has actually changed before performing any updates.\n_Example_:\n```codeBlockLines_e6Vv\n// Monitor changes in the model (e.g., dropdown selection)\nconst unlisten = appsmith.onModelChange((newModel) => {\n  // Compare the selected item and update if there's a change\n  if (newModel.selectedItem !== appsmith.model.selectedItem) {\n    // Update the display only if the selected item has changed\n    setSelectedItem(newModel.selectedItem);\n  }\n});\n// Event listener to update the model when the dropdown value changes\ndocument.getElementById(\"itemSelect\").addEventListener(\"change\", function(event) {\n  appsmith.model.selectedItem = event.target.value;\n  setSelectedItem(event.target.value); // Ensure immediate update on change\n});\n// Unsubscribe when no longer interested in updates (optional in this simple case)\nunlisten();\n```\nWhen the condition is applied, updates occur only when the selected item changes, preventing unnecessary updates and avoiding infinite loops. When you're no longer interested in listening to the model change , call the return value of the `appsmith.onModelChange` function.\n#### onUiChange [​](https://docs.appsmith.com/reference/widgets/custom\\#onuichange \"Direct link to onUiChange\")\nAllows a handler function to be called whenever the UI changes i.e width, height, providing a useful mechanism for updating components affected by UI changes from the platform.\n```codeBlockLines_e6Vv\n  const unlisten = appsmith.onUiChange((ui) => {\n    setComponentWidth(ui.width);\n  });\n  // Unsubscribe when no longer interested in updates.\n  unlisten();\n```\n#### onReady [​](https://docs.appsmith.com/reference/widgets/custom\\#onready \"Direct link to onReady\")\nThe **onReady** event in Appsmith is a mechanism to wait for the parent application to complete its initialization before executing custom widget logic. Use `appsmith.onReady` to pass a handler function. This handler gets called when the parent application is ready, and you should begin rendering your component from this handler.\n```codeBlockLines_e6Vv\nappsmith.onReady(() => {\n  /* you need to initiate the component here, for example,\n   * if you have a react component - call reactDom.render here\n   * if you have vanila JS component - call the contructor or initiate here\n   */\n});\n```\nwarning\n- Initializing your component inside the onReady handler function is very important as it makes sure that the parent application is ready to\ncommunicate with your custom component before initialization.\n#### onThemeChange [​](https://docs.appsmith.com/reference/widgets/custom\\#onthemechange \"Direct link to onThemeChange\")\nThe `onThemeChange` function allows theme changes from the application to be applied to a Custom widget. It triggers a callback whenever the theme changes, allowing your widget to automatically reflect the updated design and style. The following theme properties are accessible:\n- `primaryColor`: Represents the primary color of the application theme. For example, `#FF5733`.\n- `backgroundColor`: Represents the background color of the application theme. For example, `#f0f0f0`.\n- `borderRadius`: Represents the border radius for rounded corners in the theme. For example, `0px` or `1.5rem`.\n- `borderShadow`: Represents the shadow applied to borders in the theme. For example, `0px 4px 6px rgba(0, 0, 0, 0.1)`.\nIf you no longer need to listen for theme changes, you can unsubscribe by calling the function as a return statement to `onThemeChange` (e.g., `unlisten()`).\n_Example:_ If you want to create a button that adapts to the application's theme properties, you can use the `onThemeChange` function to dynamically apply styles like primary color, background color, border radius, and shadow.\n```codeBlockLines_e6Vv\nfunction ThemedButton() {\n\tconst [themeStyles, setThemeStyles] = React.useState({});\n\tReact.useEffect(() => {\n\t\t// Listen for theme changes and update button styles\n\t\tconst unlisten = appsmith.onThemeChange((theme) => {\n\t\t\tsetThemeStyles({\n\t\t\t\tcolor: theme.primaryColor,\n\t\t\t\tbackgroundColor: theme.backgroundColor,\n\t\t\t\tborderRadius: theme.borderRadius,\n\t\t\t\tboxShadow: theme.borderShadow,\n\t\t\t});\n\t\t});\n\t\treturn () => unlisten(); // Clean up listener on unmount\n\t}, []);\n\treturn (\n\t\t<Button style={themeStyles}>Next</Button>\n\t);\n}\n```\n### CSS API [​](https://docs.appsmith.com/reference/widgets/custom\\#css-api \"Direct link to CSS API\")\nThese css variables are accessible within the CSS editor, offer specific functionalities and customization options. The variables fall into three groups: model variables, UI variables, and theme variables. Appsmith updates the values of these properties when the corresponding source changes.\n#### model [​](https://docs.appsmith.com/reference/widgets/custom\\#model \"Direct link to model\")\nThe `model` property retrieves the value passed in the **Default Model** property of the Custom widget. Appsmith automatically generates corresponding CSS variables for each string and number property within your model. This feature is beneficial for transmitting CSS configurations, such as width or color, through your model.\n```codeBlockLines_e6Vv\n/* CSS Variable Naming Convention: --appsmith-model-<property-name> */\n// For instance, with the following Default Model:\n{\n\t\"mainColor\": \"#000\",\n\t\"borderWidth\": \"1px\"\n}\n// Appsmith automatically creates the corresponding variables:\n--appsmith-model-mainColor\n--appsmith-model-borderWidth\n// Utilize them as follows:\nbutton {\n\tbackground-color: var(--appsmith-model-mainColor);\n\tborder: var(--appsmith-model-borderWidth) solid var(--appsmith-model-mainColor);\n}\n```\n#### UI and theme [​](https://docs.appsmith.com/reference/widgets/custom\\#ui-and-theme \"Direct link to UI and theme\")\nThese CSS variables, available to control widget size and define the theme:\n- `ui`: representing the height and width of the widget in pixels.\n- `theme`: representing the selected theme of your application.\n```codeBlockLines_e6Vv\n//Widget size\n--appsmith-ui-width;\n--appsmith-ui-height;\n//Application theme\n--appsmith-theme-primaryColor;\n--appsmith-theme-backgroundColor;\n--appsmith-theme-borderRadius;\n--appsmith-theme-boxShadow;\n```\ninfo\n`--appsmith-ui-width` and `--appsmith-ui-height` are number types, to convert them to px, you can use\n`calc(var(--appsmith-ui-width) * 1px)`"
        },
        {
          "type": "section",
          "title": "See also [​](https://docs.appsmith.com/reference/widgets/custom\\#see-also \"Direct link to See also\")",
          "content": "If you’re looking to explore more, these guides are a great next step:\n- [Create Custom Widgets Using React](https://docs.appsmith.com/build-apps/how-to-guides/Create-Custom-Widgets-Using-Iframe) \\- Explore how to create custom widgets using React to add complex functionality to your app.\n- [Create Custom Widgets Using Vanilla JS](https://docs.appsmith.com/build-apps/how-to-guides/custom-widget-using-vanillajs) \\- Learn how to build custom widgets using Vanilla JS for lightweight and flexible customization."
        },
        {
          "type": "section",
          "title": "Sample apps [​](https://docs.appsmith.com/reference/widgets/custom\\#sample-apps \"Direct link to Sample apps\")",
          "content": "- [Image Annotator](https://app.appsmith.com/app/image-annotator/image-labeler-react-659fb55bf645785f6fc6f9c9)\n- [Data grid widget](https://app.appsmith.com/app/data-grid/page1-6597ff5559aa5450e0eb4eb9)\n- [Signature Pad widget](https://app.appsmith.com/app/signature-pad/page1-6597af1e21e083222a47e366)\nWas this page helpful?\n![Thumbs Up](https://docs.appsmith.com/img/thumbs-up-line.svg)![Thumbs down](https://docs.appsmith.com/img/thumbs-down-line.svg)\n- [Content properties](https://docs.appsmith.com/reference/widgets/custom#content-properties)\n  - [Widget](https://docs.appsmith.com/reference/widgets/custom#widget)\n  - [General](https://docs.appsmith.com/reference/widgets/custom#general)\n  - [Events](https://docs.appsmith.com/reference/widgets/custom#events)\n- [Reference properties](https://docs.appsmith.com/reference/widgets/custom#reference-properties)\n- [Custom Widget Builder](https://docs.appsmith.com/reference/widgets/custom#custom-widget-builder)\n  - [Javascript API](https://docs.appsmith.com/reference/widgets/custom#javascript-api)\n  - [Methods](https://docs.appsmith.com/reference/widgets/custom#methods)\n  - [CSS API](https://docs.appsmith.com/reference/widgets/custom#css-api)\n- [See also](https://docs.appsmith.com/reference/widgets/custom#see-also)\n- [Sample apps](https://docs.appsmith.com/reference/widgets/custom#sample-apps)"
        }
      ],
      "images": [
        "https://docs.appsmith.com/img/custom-ref-event.png",
        "https://docs.appsmith.com/img/custom-widget-builder.png",
        "https://docs.appsmith.com/img/custom-widget-onClick-event.png",
        "https://docs.appsmith.com/img/thumbs-up-line.svg",
        "https://docs.appsmith.com/img/thumbs-down-line.svg"
      ]
    }
  ],
  "assetsPolicy": {
    "useOriginalImages": true,
    "rewriteText": false
  }
}