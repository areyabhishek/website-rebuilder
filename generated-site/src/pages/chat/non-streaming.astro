---
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Non-streaming chat | Vapi</title>
  <meta name="description" content="Build a chat integration that receives complete responses after processing, perfect for batch processing, simple UIs, or when you need the full response before proceeding.">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
  <nav class="navbar">
    <div class="nav-container">
      <div class="nav-brand">
        <a href="/"><h1>Vapi</h1></a>
      </div>
      <div class="nav-links">
        <a href="/" class="nav-link">Home</a>
        <a href="/chat/non-streaming" class="nav-link active">Non Streaming</a>
        <a href="/api-reference/calls/create" class="nav-link">Create</a>
        <a href="/api-reference/files/delete" class="nav-link">Delete</a>
        <a href="/api" class="nav-link">Api</a>
        <a href="/assistants/quickstart" class="nav-link">Quickstart</a>
      </div>
    </div>
  </nav>

  <main class="main">
    <section class="hero">
      <div class="container">
        <h1 class="hero-title">Non-streaming chat</h1>
        <p class="hero-description">Build a chat integration that receives complete responses after processing, perfect for batch processing, simple UIs, or when you need the full response before proceeding.</p>
      </div>
    </section>

    <section class="section">
      <div class="container">
        <div class="card">
          <h2>Overview</h2>
          <p>Build a chat integration that receives complete responses after processing, perfect for batch processing, simple UIs, or when you need the full response before proceeding. Ideal for integrations where real-time streaming isn't necessary.</p>
        </div>
      </div>
    </section>

    <section class="section">
      <div class="container">
        <div class="card">
          <h2>Prerequisites</h2>
          <ul class="checklist">
            <li>Completed <a href="/chat/quickstart" class="link">Chat quickstart</a> tutorial</li>
            <li>Understanding of basic HTTP requests and JSON handling</li>
            <li>Familiarity with JavaScript/TypeScript promises or async/await</li>
          </ul>
        </div>
      </div>
    </section>

    <section class="section">
      <div class="container">
        <div class="card">
          <h2>Scenario</h2>
          <p>We'll build a help desk system for "TechFlow" that processes support messages through text chat and maintains conversation history using <code>previousChatId</code>.</p>
        </div>
      </div>
    </section>

    <section class="section">
      <div class="container">
        <div class="card">
          <h2>1. Basic Non-Streaming Implementation</h2>
          <h3>Create a simple chat function</h3>
          <p>Start with a basic non-streaming chat implementation:</p>
          <div class="code-section">
            <h4>Basic Non-Streaming Request</h4>
            <pre class="code-block">const response = await fetch('https://api.vapi.ai/chat', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer YOUR_API_KEY',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    message: 'Hello, I need help with my account',
    assistant: {
      model: 'gpt-4',
      voice: 'natural'
    }
  })
});

const result = await response.json();
console.log(result.message);</pre>
          </div>
        </div>
      </div>
    </section>

    <section class="section">
      <div class="container">
        <div class="card">
          <h2>2. Context Management with previousChatId</h2>
          <h3>Link chats for conversation context</h3>
          <p>Use <code>previousChatId</code> to maintain context across multiple chats:</p>
          <div class="code-section">
            <h4>Conversation Chain</h4>
            <pre class="code-block">// First chat
const firstChat = await fetch('https://api.vapi.ai/chat', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer YOUR_API_KEY',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    message: 'I forgot my password',
    assistant: { model: 'gpt-4' }
  })
});

const firstResult = await firstChat.json();
const chatId = firstResult.id;

// Follow-up chat with context
const followUpChat = await fetch('https://api.vapi.ai/chat', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer YOUR_API_KEY',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    message: 'What email should I use?',
    previousChatId: chatId,
    assistant: { model: 'gpt-4' }
  })
});</pre>
          </div>
        </div>
      </div>
    </section>

    <section class="section">
      <div class="container">
        <div class="card">
          <h2>3. Custom Assistant Configuration</h2>
          <h3>Use inline assistant configuration</h3>
          <p>Instead of pre-created assistants, define configuration per request:</p>
          <div class="code-section">
            <h4>Custom Assistant</h4>
            <pre class="code-block">const customChat = await fetch('https://api.vapi.ai/chat', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer YOUR_API_KEY',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    message: 'How do I reset my password?',
    assistant: {
      model: 'gpt-4-turbo',
      systemMessage: 'You are a helpful TechFlow support agent. Always be friendly and provide step-by-step instructions.',
      temperature: 0.7,
      maxTokens: 500
    }
  })
});</pre>
          </div>
        </div>
      </div>
    </section>

    <section class="section">
      <div class="container">
        <div class="card">
          <h2>Next Steps</h2>
          <p>Enhance your non-streaming chat system further:</p>
          <ul class="next-steps">
            <li><strong><a href="/chat/streaming" class="link">Add streaming capabilities</a></strong> - Upgrade to real-time responses for better UX</li>
            <li><strong>OpenAI compatibility</strong> - Use existing OpenAI integrations with Vapi</li>
            <li><strong>Error handling</strong> - Implement robust error handling for production use</li>
            <li><strong>Rate limiting</strong> - Add proper rate limiting for your API calls</li>
          </ul>
        </div>
      </div>
    </section>
  </main>

  <style>
    :root {
      --brand: #2563eb;
      --brand-alt: #1d4ed8;
      --bg: #ffffff;
      --surface: #f8fafc;
      --text: #0f172a;
      --muted: #64748b;
      
      --font-heading: "Inter", sans-serif;
      --font-body: "Inter", sans-serif;
      
      --space-0: 0px;
      --space-1: 4px;
      --space-2: 8px;
      --space-3: 12px;
      --space-4: 16px;
      --space-5: 20px;
      --space-6: 24px;
      --space-7: 28px;
      --space-8: 32px;
      --space-10: 40px;
      --space-12: 48px;
      --space-16: 64px;
      --space-20: 80px;
      
      --radius-sm: 4px;
      --radius-md: 8px;
      --radius-lg: 12px;
      
      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: var(--font-body);
      color: var(--text);
      background-color: var(--bg);
      line-height: 1.6;
    }

    .navbar {
      background: var(--surface);
      border-bottom: 1px solid #e2e8f0;
      padding: var(--space-4) 0;
      position: sticky;
      top: 0;
      z-index: 100;
    }

    .nav-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 var(--space-6);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .nav-brand a {
      text-decoration: none;
    }

    .nav-brand h1 {
      font-family: var(--font-heading);
      font-size: 1.5rem;
      font-weight: 700;
      color: var(--brand);
    }

    .nav-links {
      display: flex;
      gap: var(--space-8);
    }

    .nav-link {
      color: var(--muted);
      text-decoration: none;
      font-weight: 500;
      padding: var(--space-2) var(--space-4);
      border-radius: var(--radius-sm);
      transition: all 0.2s ease;
    }

    .nav-link:hover {
      color: var(--text);
      background: rgba(37, 99, 235, 0.1);
    }

    .nav-link.active {
      color: var(--brand);
      background: rgba(37, 99, 235, 0.1);
    }

    .main {
      padding: var(--space-16) 0;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 var(--space-6);
    }

    .section {
      margin-bottom: var(--space-16);
    }

    .hero {
      text-align: center;
      margin-bottom: var(--space-20);
    }

    .hero-title {
      font-family: var(--font-heading);
      font-size: 3rem;
      font-weight: 700;
      color: var(--text);
      margin-bottom: var(--space-6);
    }

    .hero-description {
      font-size: 1.25rem;
      color: var(--muted);
      max-width: 700px;
      margin: 0 auto;
    }

    .card {
      background: var(--surface);
      border-radius: var(--radius-lg);
      padding: var(--space-8);
      box-shadow: var(--shadow-sm);
      border: 1px solid #e2e8f0;
    }

    .card h2 {
      font-family: var(--font-heading);
      font-size: 1.875rem;
      font-weight: 600;
      color: var(--text);
      margin-bottom: var(--space-6);
    }

    .card h3 {
      font-family: var(--font-heading);
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text);
      margin-bottom: var(--space-4);
    }

    .card h4 {
      font-family: var(--font-heading);
      font-weight: 600;
      color: var(--text);
      margin-bottom: var(--space-3);
    }

    .checklist {
      list-style: none;
      padding: 0;
    }

    .checklist li {
      padding: var(--space-3) 0;
      position: relative;
      padding-left: var(--space-6);
    }

    .checklist li::before {
      content: '✓';
      color: var(--brand);
      position: absolute;
      left: 0;
      font-weight: bold;
    }

    .link {
      color: var(--brand);
      text-decoration: none;
      font-weight: 500;
    }

    .link:hover {
      color: var(--brand-alt);
      text-decoration: underline;
    }

    code {
      background: #f1f5f9;
      color: var(--text);
      padding: var(--space-1) var(--space-2);
      border-radius: var(--radius-sm);
      font-family: 'Courier New', monospace;
      font-size: 0.875rem;
    }

    .code-section {
      margin: var(--space-6) 0;
    }

    .code-block {
      background: #1e293b;
      color: #e2e8f0;
      padding: var(--space-6);
      border-radius: var(--radius-md);
      font-family: 'Courier New', monospace;
      font-size: 0.875rem;
      margin: var(--space-4) 0;
      overflow-x: auto;
      line-height: 1.5;
    }

    .next-steps {
      list-style: none;
      padding: 0;
    }

    .next-steps li {
      padding: var(--space-4) 0;
      border-bottom: 1px solid #e2e8f0;
      position: relative;
      padding-left: var(--space-6);
    }

    .next-steps li:last-child {
      border-bottom: none;
    }

    .next-steps li::before {
      content: '→';
      color: var(--brand);
      position: absolute;
      left: 0;
      font-weight: bold;
    }

    @media (max-width: 768px) {
      .nav-links {
        display: none;
      }
      
      .hero-title {
        font-size: 2rem;
      }
      
      .hero-description {
        font-size: 1.125rem;
      }
      
      .container {
        padding: 0 var(--space-4);
      }
      
      .code-block {
        font-size: 0.8rem;
        padding: var(--space-4);
      }
    }
  </style>
</body>
</html>